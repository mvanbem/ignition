(function() {var implementors = {};
implementors["ignition_9p"] = [{"text":"impl Send for Fid","synthetic":true,"types":[]},{"text":"impl Send for FileType","synthetic":true,"types":[]},{"text":"impl Send for OpenAccess","synthetic":true,"types":[]},{"text":"impl Send for OpenMode","synthetic":true,"types":[]},{"text":"impl Send for Qid","synthetic":true,"types":[]},{"text":"impl Send for Stat","synthetic":true,"types":[]},{"text":"impl Send for StatMode","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for UnixTriplet","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for TVersion","synthetic":true,"types":[]},{"text":"impl Send for RVersion","synthetic":true,"types":[]},{"text":"impl Send for TAttach","synthetic":true,"types":[]},{"text":"impl Send for RAttach","synthetic":true,"types":[]},{"text":"impl Send for RError","synthetic":true,"types":[]},{"text":"impl Send for TWalk","synthetic":true,"types":[]},{"text":"impl Send for RWalk","synthetic":true,"types":[]},{"text":"impl Send for TOpen","synthetic":true,"types":[]},{"text":"impl Send for ROpen","synthetic":true,"types":[]},{"text":"impl Send for TCreate","synthetic":true,"types":[]},{"text":"impl Send for RCreate","synthetic":true,"types":[]},{"text":"impl Send for TRead","synthetic":true,"types":[]},{"text":"impl Send for RRead","synthetic":true,"types":[]},{"text":"impl Send for TWrite","synthetic":true,"types":[]},{"text":"impl Send for RWrite","synthetic":true,"types":[]},{"text":"impl Send for TClunk","synthetic":true,"types":[]},{"text":"impl Send for TStat","synthetic":true,"types":[]},{"text":"impl Send for RStat","synthetic":true,"types":[]},{"text":"impl Send for TWstat","synthetic":true,"types":[]},{"text":"impl Send for ReadMessageError","synthetic":true,"types":[]},{"text":"impl Send for MessageBody","synthetic":true,"types":[]},{"text":"impl Send for MessageType","synthetic":true,"types":[]}];
implementors["ignition_9p_wire"] = [{"text":"impl&lt;'a, I, T&gt; Send for BorrowedCountPrefixedList&lt;'a, I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for OwnedCountPrefixedList&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for BorrowedLengthPrefixedBytes&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for OwnedLengthPrefixedBytes&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, T&gt; Send for BorrowedSizePrefixed&lt;'a, I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for LimitedWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for OwnedSizePrefixed&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ignition_blob"] = [{"text":"impl&lt;T&gt; Send for WarpBufReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InternalServerError","synthetic":true,"types":[]},{"text":"impl Send for BlobId","synthetic":true,"types":[]},{"text":"impl Send for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for TokioFileSystem","synthetic":true,"types":[]}];
implementors["ignition_demo_9p_server"] = [{"text":"impl Send for ConnectionState","synthetic":true,"types":[]},{"text":"impl Send for AllocateFidError","synthetic":true,"types":[]},{"text":"impl Send for Node","synthetic":true,"types":[]},{"text":"impl Send for ROOT","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()