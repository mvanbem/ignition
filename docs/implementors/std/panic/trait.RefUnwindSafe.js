(function() {var implementors = {};
implementors["ignition_9p"] = [{"text":"impl RefUnwindSafe for Fid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenAccess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Qid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixTriplet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TAttach","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAttach","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TWalk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RWalk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TOpen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ROpen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TCreate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RCreate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TRead","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RRead","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TWrite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RWrite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TClunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TStat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RStat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TWstat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadMessageError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]}];
implementors["ignition_blob"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for WarpBufReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalServerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlobId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokioFileSystem","synthetic":true,"types":[]}];
implementors["ignition_demo_9p_server"] = [{"text":"impl RefUnwindSafe for ConnectionState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllocateFidError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ROOT","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()